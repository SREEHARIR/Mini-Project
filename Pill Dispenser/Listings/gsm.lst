C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GSM
OBJECT MODULE PLACED IN .\Objects\gsm.obj
COMPILER INVOKED BY: F:\Application\Keil uVision\C51\BIN\C51.EXE gsm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\gsm.lst) TABS(2) OBJECT(.\Objects\gsm.obj)

line level    source

   1          /*Transmitter*/
   2          
   3          #include<reg52.h>
   4          #include<stdio.h>
   5          #include<string.h>
   6          #include<intrins.h>
   7          
   8          sbit RS = P1^2;
   9          sbit EN = P1^1;
  10          sbit D0 = P0^0;
  11          sbit D1 = P0^1;
  12          sbit D2 = P0^2;
  13          sbit D3 = P0^3;
  14          sbit D4 = P0^4;
  15          sbit D5 = P0^5;
  16          sbit D6 = P0^6;
  17          sbit D7 = P0^7;
  18          
  19          sbit sw=P2^0;
  20          
  21          unsigned char Command_CMGF[]="AT+CMGF=1\r";
  22          unsigned char CtrlZ=0x1A;
  23          //unsigned char Command_CMGS[]={"AT+CMGS =+919446309596\r"};//,"AT+CMGS =+919446309596\r","AT+CMGS =+91944
             -6309596\r"};
  24          unsigned char Command_AT[]="AT\r";
  25          //unsigned char msg02[]="Hello!";
  26          
  27          unsigned char str[60];
  28          int energy=1,k=0,charge=0;
  29          //unsigned char ascii[10]={'0','1','2','3','4','5','6','7','8','9'};
  30          //unsigned char flag_mode=1,flag1=1,flag2=1,flag3=1,flag4=1,flag5=1,flag6=1,flag7=1,flag8=1,flag9=1;
  31          //unsigned int n=0,k=0,n1=0,k1=0,
  32          
  33          //void lcd_enable(void);
  34          void delay(unsigned int count);
  35          //void lcd_cmd(unsigned char com);
  36          //void lcd_string_disp(unsigned char *disp);
  37          //void lcd_init(void);
  38          //void lcd_char_disp(unsigned char disp);
  39          //void lcd_number_display(unsigned char number);
  40          //void display_1(void);
  41          //void display_2(void);
  42          //void control_lights(void);
  43          void gsm_init(void);
  44          void gsm_set(void);
  45          void gsm_tx(unsigned char serialdata);
  46          void gsm_rx(void);
  47          void gsm_tx_str(unsigned char *ref);
  48          void int_to_str(int num);
  49          void init_isr(void);
  50          void disable_isr(void);
  51          void enable_isr(void);
  52          void str_to_ascii(unsigned char *ref);
  53          void sendsms(unsigned char *ref);
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 2   

  54          
  55          void delay(unsigned int count)
  56          {
  57   1        int j;
  58   1        for(k=0;k<count;k++)
  59   1          for(j=0;j<1275;j++);
  60   1      }
  61          
  62          void Lcd_Port(char a)
  63          {
  64   1        if(a & 1)
  65   1          D0 = 1;
  66   1        else 
  67   1          D0 = 0;
  68   1        
  69   1        if(a & 2)
  70   1          D1 = 1;
  71   1        else
  72   1          D1 = 0;
  73   1        
  74   1        if(a & 4)
  75   1          D2 = 1;
  76   1        else
  77   1          D2 = 0;
  78   1        
  79   1        if(a & 8)
  80   1          D3 = 1;
  81   1        else
  82   1          D3 = 0;
  83   1        
  84   1        if(a & 16)
  85   1          D4 = 1;
  86   1        else
  87   1          D4 = 0;
  88   1      
  89   1        if(a & 32)
  90   1          D5 = 1;
  91   1        else
  92   1          D5 = 0;
  93   1        
  94   1        if(a & 64)
  95   1          D6 = 1;
  96   1        else 
  97   1          D6 = 0;
  98   1        
  99   1        if(a & 128)
 100   1          D7 = 1;
 101   1        else
 102   1          D7 = 0;
 103   1      }
 104          void Lcd_Cmd(char a)
 105          { 
 106   1        RS = 0;             // => RS = 0
 107   1        Lcd_Port(a);             //Data transfer
 108   1        EN  = 1;             // => E = 1
 109   1        delay(1);
 110   1        EN  = 0;             // => E = 0
 111   1      }
 112          
 113          void Lcd_Clear()
 114          {
 115   1          Lcd_Cmd(1);
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 3   

 116   1      }
 117          
 118          void Lcd_Set_Cursor(char a, char b)
 119          {
 120   1        if(a == 1)
 121   1          Lcd_Cmd(0x80 + b);
 122   1        else if(a == 2)
 123   1          Lcd_Cmd(0xC0 + b);
 124   1      }
 125          
 126          void Lcd_Init()
 127          {
 128   1        Lcd_Port(0x00);
 129   1        RS = 0;
 130   1        delay(20);
 131   1        ///////////// Reset process from datasheet /////////
 132   1        Lcd_Cmd(0x30);
 133   1        delay(5);
 134   1        Lcd_Cmd(0x30);
 135   1        delay(11);
 136   1        Lcd_Cmd(0x30);
 137   1        /////////////////////////////////////////////////////
 138   1        Lcd_Cmd(0x38);    //function set
 139   1        Lcd_Cmd(0x0C);    //display on,cursor off,blink off
 140   1        Lcd_Cmd(0x01);    //clear display
 141   1        Lcd_Cmd(0x06);    //entry mode, set increment
 142   1      }
 143          
 144          void Lcd_Write_Char(char a)
 145          {
 146   1         RS = 1;             // => RS = 1
 147   1         Lcd_Port(a);             //Data transfer
 148   1         EN  = 1;             // => E = 1
 149   1         delay(1);
 150   1         EN  = 0;             // => E = 04
 151   1      }
 152          
 153          void Lcd_Write_String(char *a)
 154          {
 155   1        int k;
 156   1        for(k=0;a[k]!='\0';k++)
 157   1         Lcd_Write_Char(a[k]);
 158   1      }
 159          
 160          void gsm_init(void)    // INITIALIZE SERIAL PORT
 161          {
 162   1        SCON = 0x50;    // SERIAL MODE 1, 8-DATA BIT 1-START BIT, 1-STOP BIT, REN ENABLED
 163   1        TMOD |= 0x20;   // Timer 1 IN MODE 2-AUTO RELOAD TO GENERATE BAUD RATE
 164   1        TH1 = 0xFD; // LOAD BAUDRATE TO TIMER REGISTER
 165   1        TL1 = 0xFD;
 166   1        ES=1;
 167   1        EA=1;
 168   1        TR1 = 1;    // START TIMER
 169   1                
 170   1        gsm_set();
 171   1      }
 172          
 173          void gsm_set(void)
 174          {
 175   1        //gsm_tx_str("AT+CMGF=1%c");
 176   1        //strcpy(str,"AT+CMGF=?\r");
 177   1        //strcpy(str,"ABCDEFGHIJKLMNOPQRSTUVWXYZ\rabcdefghijklmnopqrstuvwxyz\r");
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 4   

 178   1        //str_to_ascii(str);
 179   1        gsm_tx_str(Command_AT);
 180   1        delay(200);
 181   1        gsm_tx_str(Command_CMGF);
 182   1        delay(200);
 183   1        gsm_tx_str("AT+CMGS =+919446309596\r\n");
 184   1        delay(200);
 185   1        gsm_tx_str("Hi! This number has been registered for Electricity Billing\n");
 186   1        gsm_tx(CtrlZ); 
 187   1        delay(5);
 188   1        return;
 189   1      }
 190          
 191          void gsm_tx(unsigned char serialdata)
 192          {
 193   1        SBUF = serialdata;      // LOAD DATA TO SERIAL BUFFER REGISTER
 194   1        while(TI == 0);       // WAIT UNTIL TRANSMISSION TO COMPLETE
 195   1        TI = 0;   // CLEAR TRANSMISSION INTERRUPT FLAG
 196   1      }
 197          
 198          //void gsm_rx()     // Function to read the response from GSM
 199          //{     
 200          //  while(RI == 0);   // Wait until the byte received  
 201          //  //delay(200);
 202          //  str[k]=SBUF;    //storing byte in str array
 203          //  Rk=0;           //clear RI to receive next byte
 204          //}
 205          
 206          void gsm_tx_str(unsigned char *ref)
 207          {
 208   1        
 209   1        while(*ref!='\0')
 210   1        {
 211   2          gsm_tx(*ref);
 212   2          ref++;
 213   2        }
 214   1        //gsm_tx(13);
 215   1        //gsm_tx(CtrlZ);
 216   1      }
 217          
 218          //void gsm_sms_num(unsigned char *ref)
 219          //{
 220          //  int k=0;
 221          //  Lcd_Set_Cursor(2,11); 
 222          //  Lcd_Write_String("To :");
 223          //  while(*ref!='\0')
 224          //  {
 225          //    str[k]=*ref;
 226          //    k++;
 227          //    ref++;
 228          //  }
 229          //  str[k]='\0';
 230          //  Lcd_Write_String(str);
 231          //  delay(50);
 232          //}
 233          
 234          void sendsms(unsigned char *ref)
 235          {
 236   1        unsigned char command[]="AT+CMGS=+91xxxxxxxxxx\r";
 237   1        k=0;
 238   1        while(*ref!='\0')
 239   1        {
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 5   

 240   2          str[k]=*ref;
 241   2          ref++;
 242   2          k++;
 243   2        }
 244   1        str[k]=*ref;
 245   1        Lcd_Clear();
 246   1        Lcd_Set_Cursor(1,0); 
 247   1        Lcd_Write_String("Sending SMS To :");
 248   1        Lcd_Set_Cursor(2,0);
 249   1        Lcd_Write_String(str);
 250   1        
 251   1        strcpy(command,"AT+CMGS=");
 252   1        strcat(command,str);
 253   1        strcat(command,"\r\n");
 254   1        gsm_tx_str(command);
 255   1        gsm_tx_str("Your Electricity Energy Consumption is : ");
 256   1        int_to_str(energy);
 257   1        gsm_tx_str(str);
 258   1        gsm_tx_str(" and your Electricity Bill Amount is : " );
 259   1        int_to_str(charge);
 260   1        gsm_tx_str(str);
 261   1      }
 262          
 263          void int_to_str(int num)
 264          {
 265   1        int size=0,k=0,temp;
 266   1        while(num!=0)
 267   1        {
 268   2          str[k]=num%10 + 48;
 269   2          num=num/10;
 270   2          k++;  
 271   2        }
 272   1        str[k]='\0';
 273   1        for(k=0;str[k]!='\0';k++);
 274   1        size=k-1;
 275   1        for(k=0;k<((size+1)/2);k++)
 276   1        {
 277   2          temp = str[k];
 278   2          str[k] = str[size-k];
 279   2          str[size-k] = temp;
 280   2        }
 281   1      }
 282          
 283          //void str_to_ascii(unsigned char *ref)
 284          //{
 285          //  int size=0;
 286          //  for(k=0;*ref!='\0';k++)
 287          //  {
 288          //    str[k]=*ref;
 289          //    ref++;
 290          //  }
 291          //  str[k]='\0';
 292          //  size=k-1;
 293          //  for(k=0;str[k]!='\0';k++)
 294          //  {
 295          //    //if(str[k]==' ')
 296          //    {
 297          //      //str[k]=str[k] + 0x20;
 298          //    }
 299          //    //else if(str[k]>=0x0a)
 300          //    {
 301          //      //str[k]=str[k] + 0x80;//- 0xBF;
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 6   

 302          //    }
 303          //    //str[k]=str[k]-48;
 304          //  }
 305          //}
 306          
 307          void ISR_INT1(void) interrupt 2
 308          {
 309   1        energy++;
 310   1      }
 311          
 312          void isr_init(void)
 313          {
 314   1        IE = 0x84;
 315   1        IT1 = 1;
 316   1      }
 317          void disable_isr(void)
 318          {
 319   1        IE=0x04;
 320   1      }
 321          
 322          void enable_isr(void)
 323          {
 324   1        IE=0x84;
 325   1      }
 326          
 327          /*
 328          void main()
 329          {
 330            BIT1=0;
 331            BIT2=0;
 332            BIT3=0;
 333            BIT4=0;
 334            Lcd_Init();
 335            gsm_init();
 336            //gsm_rx();
 337            //isr_init();
 338            
 339            Lcd_Clear();
 340            Lcd_Set_Cursor(1,4);
 341            Lcd_Write_String("WELCOME");
 342            delay(30);
 343            
 344            Lcd_Clear();
 345            Lcd_Set_Cursor(1,1);
 346            Lcd_Write_String("ENERGY METER");
 347            Lcd_Set_Cursor(2,1);
 348            Lcd_Write_String("BILLING Tx");
 349            delay(30);
 350            while(1)
 351            {
 352              Lcd_Clear();
 353              Lcd_Set_Cursor(1,2);
 354              Lcd_Write_String("ENERGY METER");
 355              Lcd_Set_Cursor(2,1);
 356              Lcd_Write_String("Energy : ");
 357              int_to_str(energy); 
 358              Lcd_Write_String(str);
 359              delay(300);
 360              if(sw_2==1)
 361              {
 362                while(sw_2==1);
 363                Lcd_Clear();
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 7   

 364                Lcd_Set_Cursor(1,1);
 365                Lcd_Write_String("SENDING SMS....");
 366                delay(30);
 367                //disable_isr();
 368          //      gsm_sms_num("9446309596");
 369          //      int_to_str(energy);
 370                str_to_ascii(str);
 371          //      gsm_tx_str(str);
 372            //    energy=1;
 373            //    enable_isr();
 374              }
 375            }
 376          }
 377          */
 378          void main()
 379          {
 380   1        //BIT1=0;
 381   1        //BIT2=0;
 382   1        //BIT3=0;
 383   1        //BIT4=0;
 384   1        Lcd_Init();
 385   1        gsm_init();
 386   1        //gsm_rx();
 387   1        isr_init();
 388   1        
 389   1        Lcd_Clear();
 390   1        Lcd_Set_Cursor(1,4);
 391   1        Lcd_Write_String("WELCOME");
 392   1        delay(200);
 393   1      
 394   1        k=0;
 395   1          Lcd_Clear();
 396   1          Lcd_Set_Cursor(1,0);
 397   1          Lcd_Write_String("GSM Electricity Billing");
 398   1          delay(200);
 399   1          Lcd_Clear();            //    Clear LCD screen
 400   1          delay(10);                                     
 401   1          //gsm_tx('A');              // Sending 'A' to GSM module
 402   1          //Lcd_Write_Char('A');                 
 403   1          //delay(1);
 404   1          //gsm_tx('T');            // Sending 'T' to GSM module
 405   1          //Lcd_Write_Char('T');                 
 406   1          //delay(1);
 407   1          //gsm_tx(0x0d); 
 408   1          //gsm_tx(0x1A);          // Sending carriage return to GSM module       
 409   1          //gsm_tx_str(Command_AT); 
 410   1          //gsm_tx(0x1A);
 411   1          //Lcd_Write_String(Command_AT);                     
 412   1         // delay(50);
 413   1          while(1)
 414   1          {
 415   2      /*
 416   2            Lcd_Write_Char('F');    
 417   2            gsm_rx();
 418   2            Lcd_Write_Char('F');
 419   2            Lcd_Write_Char(str[k]);    
 420   2              if(str[k-1]=='O' && str[k]=='K'){
 421   2                  Lcd_Write_Char(0x20);                      // Write 'Space'
 422   2                  Lcd_Write_Char(str[k-1]);
 423   2                  Lcd_Write_Char(str[k]);
 424   2                  break; 
 425   2              }
C51 COMPILER V9.54   GSM                                                                   04/13/2016 20:38:36 PAGE 8   

 426   2              k=k+1;
 427   2              if(k>50)
 428   2                k=0;
 429   2          
 430   2      */
 431   2            charge = energy * 5;
 432   2            Lcd_Set_Cursor(1,0);
 433   2            Lcd_Write_String("Energy : ");
 434   2            int_to_str(energy);
 435   2            Lcd_Write_String(str);
 436   2            Lcd_Set_Cursor(2,0);
 437   2            Lcd_Write_String("Charge : ");
 438   2            int_to_str(charge);
 439   2            Lcd_Write_String(str);
 440   2            if(sw==1)
 441   2              {
 442   3                disable_isr();
 443   3                while(sw==1);
 444   3                Lcd_Clear();
 445   3                Lcd_Set_Cursor(1,0);
 446   3                Lcd_Write_String("SENDING SMS....");
 447   3                delay(30);
 448   3                sendsms("+919446309596");         // Phone number of USER
 449   3                sendsms("1234567b89");         // Phone number of KSEB
 450   3                energy=1;
 451   3                Lcd_Clear();
 452   3                enable_isr();
 453   3              }
 454   2          }
 455   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    979    ----
   CONSTANT SIZE    =    313    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     82      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
