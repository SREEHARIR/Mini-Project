C51 COMPILER V9.54   EEPROM_AND_RTC                                                        04/20/2016 09:00:44 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM_AND_RTC
OBJECT MODULE PLACED IN .\Objects\eeprom and rtc.obj
COMPILER INVOKED BY: F:\Application\Keil uVision\C51\BIN\C51.EXE eeprom and rtc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\eeprom and rtc.lst) TABS(2) OBJECT(.\Objects\eeprom and rtc.obj)

line level    source

   1          #include<reg51.h>
   2          #include<intrins.h>
   3          
   4          sbit scl=P0^0;
   5          sbit sda=P0^1;
   6          
   7          #define LCD P2
   8          
   9          sbit rs=P0^4;
  10          sbit rw=P3^1;
  11          sbit en=P0^5;
  12          
  13          void delay(int i)
  14          {
  15   1      int j;
  16   1      while(i--)
  17   1      for(j=0;j<1223;j++);
  18   1      }
  19          
  20          
  21          
  22          void start(void)
  23          {
  24   1        /*to start make
  25   1        high to low of sda with a clock is high
  26   1        */
  27   1        sda=1;
  28   1        scl=1;
  29   1         
  30   1          
  31   1        sda=0;
  32   1        scl=0;
  33   1      }
  34          
  35          void stop()
  36          {
  37   1        /* to stop the i2c
  38   1        make an low to high of sda with scl =1*/
  39   1        sda = 0;
  40   1        scl = 1;
  41   1         
  42   1         
  43   1        sda = 1;
  44   1        scl = 0;
  45   1        //delay(10);
  46   1      }
  47          
  48          void write(unsigned char dat)
  49          {
  50   1        unsigned char i;
  51   1        for(i=0;i<8;i++)  
  52   1        {
  53   2           
  54   2           
C51 COMPILER V9.54   EEPROM_AND_RTC                                                        04/20/2016 09:00:44 PAGE 2   

  55   2          scl=0;
  56   2          sda=(dat&0x80>>i)?1:0;
  57   2          scl=1;
  58   2        }
  59   1      }
  60          
  61          void ack(void)
  62          {
  63   1        scl=0;
  64   1        sda=1;
  65   1        scl=1;
  66   1         
  67   1         
  68   1        scl=0;
  69   1      }
  70          
  71          void noack(void)
  72          {
  73   1        scl=0;
  74   1        sda=1;
  75   1        scl=1;
  76   1      }
  77          
  78          unsigned char read()
  79          {
  80   1        unsigned char i,buff=0;
  81   1        sda=1;
  82   1      
  83   1        for(i=0;i<8;i++)
  84   1        {
  85   2          scl=1;
  86   2           
  87   2           
  88   2          if(sda)
  89   2          buff|=(0x80>>i);
  90   2          scl=0;
  91   2        }
  92   1        return buff;
  93   1      }
  94          
  95          
  96          void save_i2c(char dev,char addr,char ch)
  97          {
  98   1        start();
  99   1        write(dev);
 100   1        ack();
 101   1           
 102   1           
 103   1        write(addr);
 104   1        ack();
 105   1         
 106   1           
 107   1        write(ch);
 108   1        ack();
 109   1         
 110   1           
 111   1        stop();
 112   1        delay(10);
 113   1      }
 114          
 115          char read_i2c(char dev,char addr)
 116          {
C51 COMPILER V9.54   EEPROM_AND_RTC                                                        04/20/2016 09:00:44 PAGE 3   

 117   1        unsigned char buff;
 118   1        start();
 119   1        write(dev);
 120   1        ack();
 121   1         
 122   1           
 123   1        write(addr);
 124   1        ack();
 125   1         
 126   1           
 127   1        start();
 128   1        write(dev|1);
 129   1        ack();
 130   1         
 131   1           
 132   1        buff=read();
 133   1        noack();
 134   1        stop();
 135   1           
 136   1           
 137   1        return buff;
 138   1      }
 139          
 140          
 141          
 142          void cmd_LCD(unsigned char value)
 143          {
 144   1      LCD=value;
 145   1      rs=0;
 146   1      rw=0;
 147   1      en=1;
 148   1      delay(1);
 149   1      en=0;
 150   1      }
 151          void data_LCD(unsigned char value)
 152          {
 153   1      LCD=value;
 154   1      rs=1;
 155   1      rw=0;
 156   1      en=1;
 157   1      delay(1);
 158   1      en=0;
 159   1      }
 160          
 161          
 162          void init_LCD()
 163          {
 164   1      cmd_LCD(0x38); //2 lines and 5*7 matrix
 165   1      cmd_LCD(0x80); //force curser to begin in the first line
 166   1      cmd_LCD(0x01); //clr displayyy
 167   1      cmd_LCD(0x0c);
 168   1      }
 169          
 170          void main()
 171          {
 172   1      
 173   1      int i;char ch;
 174   1      
 175   1      init_LCD();
 176   1      cmd_LCD(0x80);
 177   1      
 178   1      save_i2c(0xd0,0X00,0x80);
C51 COMPILER V9.54   EEPROM_AND_RTC                                                        04/20/2016 09:00:44 PAGE 4   

 179   1      save_i2c(0xd0,0X01,0x59);
 180   1      save_i2c(0xd0,0X02,0x23);
 181   1      save_i2c(0xd0,0X03,0x04);
 182   1      save_i2c(0xd0,0X04,0x20);
 183   1      save_i2c(0xd0,0X05,0X01);
 184   1      save_i2c(0xd0,0X06,0x10);
 185   1      save_i2c(0xd0,0X07,0x10);
 186   1      
 187   1      for(i=0;i<16;i++)
 188   1      {
 189   2      save_i2c(0xa0,i,i+'a');
 190   2      ch=read_i2c(0xa0,i);
 191   2      data_LCD(ch) ;
 192   2      }
 193   1      
 194   1      save_i2c(0xd0,0X00,0xFF);
 195   1      save_i2c(0xd0,0X01,0x59);
 196   1      save_i2c(0xd0,0X02,0x23);
 197   1      save_i2c(0xd0,0X00,0x00);
 198   1      
 199   1      while(1)
 200   1      {
 201   2      cmd_LCD(0xc0);
 202   2        //for(i=0;i<16;i++)
 203   2      //data_LCD('*');
 204   2        ch=read_i2c(0xd0,0X02);
 205   2        //data_LCD(ch+48);
 206   2      data_LCD(ch/16+48);
 207   2      data_LCD(ch%16+48);
 208   2      data_LCD('-');
 209   2      ch=read_i2c(0xd0,0X01);
 210   2      //data_LCD(ch+48);
 211   2        data_LCD(ch/16+48);
 212   2      data_LCD(ch%16+48);
 213   2      data_LCD('-');
 214   2      ch=read_i2c(0xd0,0X00);
 215   2      //data_LCD(ch+48);
 216   2        data_LCD((ch&0x7F)/16+48);
 217   2      data_LCD(ch%16+48);
 218   2      }
 219   1      
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    466    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
